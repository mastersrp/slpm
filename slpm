#!/bin/sh
# suckless package manager @ 2009-2010
# - pancake at nopcode dot org

whereami() {
  for a in $PWD `echo $PATH | sed 's,:, ,g'` ; do
    if [ -e "$a/$1" ]; then
      echo "$a/$1"
      return
    fi
  done
  echo $1
}
BIN="`readlink $0`"
[ -z "${BIN}" ] && BIN=$0
[ -z "${BIN}" ] && BIN=/bin/sh # XXX?
ARG0="`whereami $BIN`"
ROOT="`dirname $ARG0`"
USRDIR="${HOME}/.slpm"
WRKDIR="${ROOT}/_work"
PKGDIR="${ROOT}/pkg"
. "${ROOT}/config"
NFODIR="${DESTDIR}/${PREFIX}/var/lib/slpm/pkg"

# XXX a bit spaguetti
hg_fetch() {
  mkdir -p $WRKDIR
  cd $WRKDIR
  if [ -d "$1" ]; then
    if [ "$3" = 1 ]; then
      echo "==> hg: updating $1 ..."
      ( cd "$1" ; hg pull && hg up )
    fi
  else
    hg clone "$2" "$1"
  fi
}

svn_fetch() {
  mkdir -p $WRKDIR
  cd $WRKDIR
  if [ -d "$1" ]; then
    if [ "$3" = 1 ]; then
      echo "==> svn: updating $1 ..."
      ( cd "$1" ; svn up )
    fi
  else
    svn co "$2" "$1"
  fi
}

git_fetch() {
  mkdir -p "$WRKDIR"
  cd "$WRKDIR"
  if [ -d "$1" ]; then
    if [ "$3" = 1 ]; then
      ( cd "$1" ; git pull )
    fi
  else
    git clone "$2" "$1"
  fi
}

tar_fetch() {
  FILE="`basename $URL`"
  cd "$WRKDIR"
  if [ -f "$WRKDIR/$FILE" ]; then
    echo "==> Already downloaded $FILE"
  else
    wget -c $URL
  fi
  if [ -d "$WRKDIR/$PKG" ]; then
    echo "==> Already uncompressed and patched $PKG"
  else
    case "$FILE" in
    *gz*) tar xzvf $FILE ; ;;
    *bz2*) tar xjvf $FILE ; ;;
    esac
  fi
}

pkg_fetch() {
  eval ${TYPE}_fetch $PKG $URL $1
}

pkg_update() {
  hg_fetch $PKG $URL
}

pkg_build() {
  if [ ! -d "$WRKDIR/$PKG" ]; then
    echo "pkg_build: Cannot open target directory"
    exit 1
  fi
  cd "$WRKDIR/$PKG/${BASEDIR}"
  if [ -n "${PKGCONFIGURE}" ]; then
    ${PKGCONFIGURE}
  else
    if [ -x "configure" ]; then
      ./configure "--prefix=${PREFIX}" ${CFGARGS} ${USER_CFGARGS}
    fi
  fi
  make DESTDIR=${DESTDIR} PREFIX=${PREFIX} prefix=${PREFIX}
}

pkg_install() {
  if [ ! -d "$WRKDIR/$PKG/${BASEDIR}" ]; then
    echo "pkg_install: Cannot open target directory"
    exit 1
  fi
  (
    cd "$WRKDIR/$PKG/${BASEDIR}"
    ${PKGINSTALL} ${PKGINSTALL_ARGS}
    if [ -n "${INSTALL_POST}" ]; then
      echo "=> Running post install script '${INSTALL_POST}'"
      (cd ${DESTDIR}/${PREFIX} ; eval $INSTALL_POST)
    fi
  )
  pkg_register
}

pkg_register() {
  [ -d "$NFODIR/$PKG" ] && return
  cd "$WRKDIR/$PKG"
  # TODO: move outside and create skel in a standard way
  mkdir -p "${WRKDIR}/.tmp/${PKG}"
  mkdir -p "${WRKDIR}/.tmp/${PKG}/bin"
  mkdir -p "${WRKDIR}/.tmp/${PKG}/lib"
  mkdir -p "${WRKDIR}/.tmp/${PKG}/man/man1"
  ${PKGINSTALL} "DESTDIR=${WRKDIR}/.tmp/${PKG}" "prefix=${WRKDIR}/.tmp/${PKG}"
  # go register
  cd "${WRKDIR}/.tmp/${PKG}"
  echo "${WRKDIR}/.tmp/${PKG}"
  mkdir -p "$NFODIR/$PKG"
  if [ -n "`ls`" ]; then
    _pfx=`pwd|cut -c 2-`
    find * -type f | sed -e "s,$_pfx,," > "$NFODIR/$PKG/files"
  else
    echo "==> WARNING: Package have installed no files"
    : > "$NFODIR/$PKG/files"
  fi
  date > "$NFODIR/$PKG/date"
  rm -rf "${WRKDIR}/.tmp/${PKG}"
}

pkg_clean() {
  cd "$WRKDIR/$PKG"
  make clean
}

pkg_deinstall() {
  if [ -e "$NFODIR/$PKG/files" ]; then
    cd "${DESTDIR}/${PREFIX}"
    for a in `cat $NFODIR/$PKG/files`; do
      [ -f "./$a" ] && echo "./$a" && rm -f "./$a"
    done
    rm -rf "$NFODIR/$PKG"
  else
    cd "$WRKDIR/$PKG"
# TODO: wrap into ${PKGDEINSTALL}
    make uninstall DESTDIR=${DESTDIR} PREFIX=${PREFIX}
  fi
}

help() {
  echo "Usage: slpm [-iudlLx] [pkg pkg ..]"
  echo " -x : execute or enter into the slpm shell"
  echo " -u : upgrade package"
  echo " -i : install package"
  echo " -d : deinstall package"
  echo " -c : clean package"
  echo " -s : search package by keyword"
  echo " -l : list installed packages or pkg files"
  echo " -L : list all available packages"
  exit 1
}

exec_shell() {
  SHELL=""
  [ -x "${PREFIX}/bin/rc" ] && SHELL="${PREFIX}/bin/rc"
  [ -x "${PREFIX}/bin/ksh" ] && SHELL="${PREFIX}/bin/ksh"
  [ -x "${PREFIX}/bin/sh" ] && SHELL="${PREFIX}/bin/sh"
  if [ -z "${SHELL}" ]; then
    echo "Cannot find shell. Please install busybox or 9base"
    exit 1
  fi
  PATH=${PREFIX}/bin:${PREFIX}/sbin:${PATH}
  MANPATH=${PREFIX}/share/man:${MANPATH}
  LD_LIBRARY_PATH=${PREFIX}/lib:${LD_LIBRARY_PATH}
  PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}
  unset PROMPT_COMMAND
  export PATH MANPATH LD_LIBRARY_PATH PKG_CONFIG_PATH
  shift
  ${SHELL} $@
  exit $?
}

[ ! -d "${NFODIR}" ] && mkdir -p "${NFODIR}"
[ ! -d "${WRKDIR}" ] && mkdir -p "${WRKDIR}"

DO=
while [ -n "$1" ]; do
  case "$1" in
  -x) exec_shell ; ;;
  -h) help ; ;;
  -c|-i|-u|-d) DO=$1 ; ;;
  -s)
    if [ -z "$2" ]; then
      echo "Usage: slpm -s [keyword]"
    else
      cd ${PKGDIR} && grep DESC * | grep -i "$2"
    fi
    exit 0
    ;;
  -L) ls ${PKGDIR} | cat ; exit 0 ; ;;
  -l)
    if [ -z "$2" ]; then
      ls "$NFODIR" | cat ; exit 0
    else
      cat "$NFODIR/$2/files" ; exit 0
    fi
    ;;
  -*) echo "Unknown flag '$1'" ;;
  *) break ;;
  esac
  shift
done

pkg_open() {
  URL=""
  TYPE=""
  DESC=""
  DEPS=""
  CFGARGS=""
  BASEDIR=""
  INSTALL_POST="" # script to run after install
  PKGINSTALL="make install"
  PKGINSTALL_ARGS="DESTDIR=${DESTDIR} PREFIX=${PREFIX} prefix=${PREFIX}"
  PKGCONFIGURE=""
  if [ ! -f "$PKGDIR/$PKG" ]; then
    echo "Cannot find $PKG"
    exit 1
  fi
  . "${PKGDIR}/$PKG"
  if [ -e "${USRDIR}/$PKG" ]; then
    . "${USRDIR}/$PKG"
  fi
  # TODO: check package variables
  if [ -z "${URL}" ]; then echo "No URL defined in package"; fi
  if [ -z "${TYPE}" ]; then echo "No TYPE defined in package"; fi
  for DEP in ${DEPS}; do
    if [ ! -e "${NFODIR}/${DEP}" ]; then
      echo "${PKG} depends on not yet installed ${DEP}"
      exit 1
    fi
  done
}

[ -z "$1" ] && help
while [ -n "$1" ]; do
  PKG=$1
  pkg_open
  case $DO in
  -c) (pkg_clean) ; ;;
  -i) (pkg_fetch) ; (pkg_build) ; (pkg_install) ; ;;
  -u) (pkg_fetch 1) ; (pkg_build) ; (pkg_install) ; ;;
  -d) (pkg_deinstall) ; ;;
  *) (pkg_fetch) ; ;;
  esac
  shift
done
